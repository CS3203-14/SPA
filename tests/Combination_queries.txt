1 - test for caching and boolean evaluation as last clause
stmt s,s1; constant c;
Select s with c.value = s.stmt# with c.value = s.stmt# with c.value = s.stmt# with c.value = s.stmt# with c.value = s.stmt# with c.value = s.stmt# with c.value = s.stmt# with c.value = s.stmt# with c.value = s.stmt# with c.value = s.stmt# with c.value = s.stmt# with c.value = s.stmt# with c.value = s.stmt# with c.value = s.stmt# with c.value = s.stmt# with c.value = s.stmt# with c.value = s.stmt# with c.value = s.stmt# with c.value = s.stmt# with c.value = s.stmt# such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Modifies(s,"c") such that Calls(_,_) such that Calls(_,_) such that Calls(_,_) such that Calls(_,_) such that Calls(_,_) such that Calls(_,_) such that Calls(_,_) such that Calls(_,_) such that Calls(_,_) such that Calls(_,_) such that Calls(_,_) such that Calls(_,_) such that Calls(_,_) such that Calls(_,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Uses(s,_) such that Next*(s,s1) such that Next*(s,s1) such that Next*(s,s1) such that Next*(s,s1) such that Next*(s,s1) such that Next*(s,s1) such that Next*(s,s1) such that Next*(s,s1) such that Next*(s,s1) such that Next*(s,s1) such that Next*(s,s) with c.value = 100
none
5000
2 - test for caching
stmt s,s1; assign a, a1;
Select a such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_) such that Modifies(a,"e") such that Modifies(s1, "c") such that Next*(s1,a) pattern a1(_, _"c+b"_)
17, 25
5000
3 - test for common synonym optimisation
stmt s, s1, s2, s3,s4,s5; print pr; assign a,a1,a2,a3,a4,a5,a6; constant c; read r;
Select <s,s2,s3,s4, a,a1,a2,a3> pattern a(_, _"6*d"_) pattern a1(_,_) pattern a2(_,_) pattern a4(_,_) such that Next*(a4,a5) such that Next*(s,s1) and Follows*(s2,s3) and Affects*(s,s1) such that Uses(s3,"d") and Uses(s,_) and Modifies (s1,_) such that Modifies(s4, "c") and Uses(s5,"c") and Follows(a2,a3) such that Uses(s2,"x") and Affects(s, s1) and Modifies(s2,"c") and Uses(pr,"e") such that Follows(pr,s2) pattern a3("g",_) such that Modifies(a2, "e") with c.value = s2.stmt# with s4.stmt# = s5.stmt# such that Follows(a5,a6) with a6.stmt# = a3.stmt# such that Calls(_,_) with s1.stmt# = s.stmt# such that Next*(r,a1)
30 20 22 1 16 11 25 26, 30 20 22 2 16 11 25 26, 30 20 22 3 16 11 25 26, 30 20 22 4 16 11 25 26, 30 20 22 5 16 11 25 26, 30 20 22 9 16 11 25 26, 30 20 22 10 16 11 25 26, 30 20 22 12 16 11 25 26, 30 20 22 13 16 11 25 26,30 20 22 15 16 11 25 26,  30 20 22 18 16 11 25 26, 30 20 22 22 16 11 25 26, 30 20 22 28 16 11 25 26,  30 20 22 29 16 11 25 26
5000
4 - test for boolean clause at the end 
stmt s, s1, s2, s3,s4; print pr; assign a,a1,a2,a3,a4,a5,a6; constant c; read r;
Select <s,s2,s3,s4, a,a1,a2,a3> pattern a(_, _"6*d"_) pattern a1(_,_) pattern a2(_,_) pattern a4(_,_) such that Next*(a4,a5) such that Next*(s,s1) and Follows*(s2,s3) and Affects*(s,s1) such that Uses(s3,"d") and Uses(s,_) and Modifies (s1,_) such that Modifies(s4, "c") and Uses(s5,"c") and Follows(a2,a3) such that Uses(s2,"x") and Affects(s, s1) and Modifies(s2,"c") and Uses(pr,"e") such that Follows(pr,s2) pattern a3("g",_) such that Modifies(a2, "e") with c.value = s2.stmt# with s4.stmt# = s5.stmt# such that Follows(a5,a6) with a6.stmt# = a3.stmt# such that Calls(_,_) with s1.stmt# = s.stmt# such that Next*(r,a1) with c.value = 100
none
5000
5 - Test for redundant queries (More general queries before more specific ones)
stmt s, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11,s12; procedure p,q,p1,q1,p2,q2; while w; if ifs; assign a; variable v,v1,v2; constant c;
Select s such that Affects*(s,s1) and Affects(s,s1) and Next*(s2,s3) and Next(s2,s3) and Follows*(s4,s5) and Follows(s4,s5) and Parent*(s6,s7) and Parent(s6,s7) and Calls*(p,q) and Calls(p, q) and Calls* (_,p1) and Calls(_,q1) and Calls*(p2,_) and Calls(q2,_) and Uses(s8,_) and Modifies(s9,_) and Next(_,_) and Calls(_,_) and Affects(_,_) pattern a(v,_) and w(v1,_) and ifs(v2,_,_) with c.value = s8.stmt# with s9.stmt# = s10.stmt# and s11.stmt# = 5 such that Modifies(s11,"c") and Uses(s11,"b") and Uses(s11,"d") and Next*(s9,s11) and Next(s9,s11) and Next*(s10,s11) and Next(s10,s11) 
23,24,25,26,29,30,31,32
5000
6 - Test merging of Next and Next* synonyms
prog_line n,n1,n2,n3,n4; stmt s; assign a; print pr; read r; while w; call cl; if ifs; constant c;
Select n such that Next*(n,n1) and Next*(_,n) and Next*(n1,_) and Next*(_, pr) and Next*(pr, _) and Next*(_, pr) and Next*(_,r) and Next*(r,_) and Next*(r, n3) and Next*(n4,r) and Next*(n,r) and Next*(_,_)
19,20
5000
7- Test merging of Next and Next* synonyms
assign a,a1,a2;while w,w1; if ifs; read r;print pr; call cl; prog_line n; constant c; 
Select <n> such that Next(15,n) and Next(n,13) and Next(_, n) and Next(n,_) and Next*(w,_) and Next*(_,w1) and Next*(pr, a1) and Next*(w,w) and Next(w1,a) and Next(w,cl) and Next(cl,a2)
12 
5000
