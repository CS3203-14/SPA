procedure main {
  i = 2 + 5;
}

each of the section, segregated by ====== signifies a single SIMPLE program, but each line can also be segregated for more specific testing, maybe?

Operations (up to 5 operands)

Valid:
======
// addition operations
i = 1 + 2
i = 1 + 2 + 3
i = 1 + 2 + 3 + 4
i = 1 + 2 + 3 + 4 + 5

i = 1 + 2 + (3 + 4 + 5) // changing the pattern (AST) ? 
i = (i + (6)) // i's value should be 21

j = 1+2+3 // result: 6
j = j+j // result: 12
j = j+i // result: 33  

k = (j+j+j)+(i+i+i)

i = (1 + 2 + (3) + 4 + 5) // what sort of AST would this have? // result 15
======
// subtraction operations
i = 5-4
i = 5-4-3 // valid expression, but should be invalid value, INTEGER lexical token does not begin with -, result should be -2 
i = 10000 - 1000 - 100 - 10 - 1 // results: 8889
i = i - 1 // results: 8888
i = i - 00001111 // should be valid expression given INTEGER's lexcial token  // results: 7777

i = (100-10)-(90-9) // result: 9
i = 100-10-90-9 // valid expression, invalid results. result: -9


i = 100
i = i-i // result: 0


======
// multiplication operations + pattern matching
i = 1 * 2 * 3 * 4 * 5
i = ((((1 * 2) *3) *4) *5) // first two should have same pattern
i = (1*(2*(3*(4*5))))  // this should have "reversed" pattern
i = 2*2*2 // result: 8
i = i*2 // result: 16
======
// div operations
i = 10 / 10
i = 100 / 9 // valid expression, invalid assignment. results: 11.111.....
i = 100 / (8/4) // result: 50
i = 1000 / 100 / 10 // result: 1
i = 1000 / (100 / 10) // result: 100
======
// mod operations
i = 100 % 10 // result: 0
i = 101 % 10 // result: 1
i = 123 % 10 % 3 // result: 0
i = 123 % (11 % 3) // result: 1

======
// combined operations + reference

i = 10 + 100 * 100 - 1 / 1 // result: 10009
i = 10 + 100 * ((100 - 1) / 1) // result: 9910

HUNDRED = 100

j = HUNDRED * HUNDRED // result: 10000
j = HUNDRED / HUNDRED // result: 1
j = HUNDRED % HUNDRED // result: 0
j = HUNDRED - HUNDRED // result: 0
j = HUNDRED * HUNDRED  + HUNDRED / HUNDRED + HUNDRED % HUNDRED + HUNDRED - HUNDRED // result: 10001

======
// operations involving references
a = 1
b = 2
c = 3
i = 1 * a + 2 * b + 3 * c // testing operations involving references, output should be 14
j = i % 3 // output should be 2
k = j / 2 // output should be 1
k = k / 0 // valid expression, but should be invalid operation 
======



Invalid: (might need double checking to confirm if it's invalid)
======
i = i + 1 // i is not defined
======
i = (1 * (2 * 3 * (4 * 5) // missing closing parentheses 
======
a = 1
b = 2
i = 1 * a + 2 * b + 3 * c // undefined reference c 
======
i = 100-(-100) // negative digits invalid
======
// double operators
i = 1 ++ 1
i = 1 ** 1
i = 1 -- 1
i = 1 // 1
i = 1 %% 1
// double operators with white space
i = 1 + + 1
i = 1 * * 1
i = 1 - - 1
i = 1 / / 1
i = 1 % % 1
// double operators with white space and parentheses
i = 1 + (+1)
i = 1 * (*1)
i = 1 - (-1)
i = 1 / (/1)
i = 1 % (%1)





 