# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
image: rsmmr/clang

build:
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  variables:
    version: "3.9"
    build: "2"
  before_script:
    - wget https://cmake.org/files/v$version/cmake-$version.-Linux-x86_64.sh
    - sh ./cmake-$version.$build-Linux-x86_64.sh --prefix=/usr/local --skip-license
  script: 
    - mkdir build
    - cd build
    - cmake ..
    - make -j4
  artifacts:
    paths:
      - build
  # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
  # cache:
  #   paths:
  #     - "*.o"

# run tests using the binary built before
test:
  stage: test
  script:
    - cd build
    - ctest -V
